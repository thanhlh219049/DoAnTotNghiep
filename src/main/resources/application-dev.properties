server.port=8082
spring.main.banner-mode=off
# DATABASE

spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:shoes}?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=${DB_USER:root}
spring.datasource.password=${DB_PASS:thanh123}
spring.datasource.hikari.maximum-pool-size=3
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


# HIBERNATE
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.use-new-id-generator-mappings=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

# Hot reload template
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=file:src/main/resources/templates/
spring.thymeleaf.enable-spring-el-compiler=true
spring.web.resources.static-locations=file:src/main/resources/static/

# JWT
jwt.secret=supersecret
jwt.duration=604800

#config file image
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB
spring.servlet.multipart.enabled=true



#=================kafka config ===================
#kafka.acks = all
#kafka.bootstrap-servers=localhost:9092
#kafka.bootstrap-servers-consumer=localhost:9092
#kafka.consumer.group_id = 1
#kafka.consumer.enable_auto_commit = true
#kafka.consumer.auto_commit_interval_ms = 1000
##spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.jackson.serialization.fail-on-empty-beans=false
#spring.kafka.listener.ack-mode=MANUAL_IMMEDIATE

numConsumersAndPartition = 3
numBroker = 3

#================================================== Config redis  ======================================================
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.ssl=false
spring.redis.name=SEND_SMS
#vinnet.redis.task-channel=DEVELOPMENT_TASK_CHANNEL
# Connection timeout (MS)
spring.redis.timeout=3000
# redis connection pool configuration
# Maximum number of links in the pool
spring.redis.pool-config.max-total=256
# Maximum free connections in connection pool
spring.redis.pool-config.max-idle=3000
# Minimum free connections in connection pool
spring.redis.pool-config.min-idle=8
## Connection pool maximum block wait time (use a negative value to indicate no limit)
#spring.redis.pool-config.max-wait-millis=1000
## Whether to check the validity of the current link when the caller obtains the link
#spring.redis.pool-config.test-on-borrow=false
## Check link validity when returning links to link pool
#spring.redis.pool-config.test-on-return=false
## Whether to detect the idle timeout when the caller gets the link. If the timeout occurs, it will be removed
#spring.redis.pool-config.test-while-idle=true
## How many links does idle link detection thread detect at a time
#spring.redis.pool-config.num-tests-per-eviction-run=8
## Idle link detection thread detection cycle. If it is negative, the detection thread will not run. (unit: ms, default is - layer)
#spring.redis.pool-config.time-between-eviction-runs-millis=60000
## Configure the minimum lifetime of a connection in the pool, in milliseconds
#spring.redis.pool-config.min-evictable-idle-time-millis=300000